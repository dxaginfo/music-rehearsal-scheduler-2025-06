// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  password        String
  role            String    @default("USER") // USER, ADMIN
  profileImageUrl String?   
  lastLoginAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  bandMembers     BandMember[]
  rehearsalAttendances RehearsalAttendance[]
  notifications   Notification[]
  createdRehearsals Rehearsal[] @relation("RehearsalCreator")
}

model Band {
  id          String      @id @default(uuid())
  name        String
  description String?
  genre       String?
  logoUrl     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  members     BandMember[]
  rehearsals  Rehearsal[]
}

model BandMember {
  id        String    @id @default(uuid())
  band      Band      @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bandId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      String    // LEADER, MEMBER
  status    String    // ACTIVE, INACTIVE, PENDING
  joinedAt  DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([bandId, userId])
  @@index([bandId])
  @@index([userId])
}

model Rehearsal {
  id                String    @id @default(uuid())
  band              Band      @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bandId            String
  title             String
  description       String?
  startDatetime     DateTime
  endDatetime       DateTime
  location          String
  isRecurring       Boolean   @default(false)
  recurrencePattern String?   // JSON string with recurrence rules
  createdBy         User      @relation("RehearsalCreator", fields: [createdById], references: [id])
  createdById       String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  attendances     RehearsalAttendance[]
  materials       RehearsalMaterial[]

  @@index([bandId])
  @@index([createdById])
  @@index([startDatetime, endDatetime])
}

model RehearsalAttendance {
  id          String    @id @default(uuid())
  rehearsal   Rehearsal @relation(fields: [rehearsalId], references: [id], onDelete: Cascade)
  rehearsalId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  status      String    // ATTENDING, NOT_ATTENDING, MAYBE, PENDING
  comment     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([rehearsalId, userId])
  @@index([rehearsalId])
  @@index([userId])
}

model RehearsalMaterial {
  id          String    @id @default(uuid())
  rehearsal   Rehearsal @relation(fields: [rehearsalId], references: [id], onDelete: Cascade)
  rehearsalId String
  name        String
  type        String    // SETLIST, SHEET_MUSIC, AUDIO, VIDEO, OTHER
  fileUrl     String?
  content     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([rehearsalId])
}

model Notification {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  type        String    // NEW_REHEARSAL, ATTENDANCE_UPDATE, BAND_INVITATION, etc.
  content     String
  relatedId   String?   // ID of related entity (rehearsal, band, etc.)
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}